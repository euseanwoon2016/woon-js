/*! For license information please see main.bundle.js.LICENSE.txt */
(()=>{"use strict";var t,e={"./src/style.css":(t,e,n)=>{n.r(e)},"./src/Woon.ts":(t,e,n)=>{n.r(e),n.d(e,{Component:()=>s,default:()=>u,w:()=>c,Heading:()=>l});var r,o=(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),i=function(){return(i=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},s=function(){function t(t){this.props={},this.state={},this.onChange=function(){},this.props=t,this.state.props=t,this.init()}return t.prototype.init=function(){},t.prototype.setState=function(t,e){var n;return this.state=i(i({},this.state),((n={})[t]=e,n)),this.onChange(),this.state[t]},t.prototype.getState=function(t){return this.state[t]},t}();const u=function(){function t(t,e){var n=this;return this.entry=t,this.component=e,this.mountedElement=document.createElement("div"),this.entry.appendChild(this.mountedElement),Object.defineProperty(e,"onChange",{value:function(){n.render()},writable:!1}),this.render()}return t.prototype.render=function(){for(;this.mountedElement.firstChild;)this.mountedElement.removeChild(this.mountedElement.firstChild);return this.mountedElement.appendChild(this.component.build()),this},t}();function c(t){var e=t.tag,n=t.attributes,r=t.styles,o=t.text,i=t.children,u=t.events,c=document.createElement(e);return null!=o&&c.appendChild(document.createTextNode(o)),null!=n&&Object.keys(n).forEach((function(t){c.setAttribute(t,n[t])})),null!=r&&Object.keys(r).forEach((function(t){c.style[t]=r[t]})),null!=i&&i.forEach((function(t){t instanceof HTMLElement?c.appendChild(t):t instanceof s&&c.appendChild(t.build())})),null!=u&&Object.keys(u).forEach((function(t){c.addEventListener(t,(function(e){return u[t](e,c)}))})),c}var l=function(t){function e(e){return t.call(this,e)||this}return o(e,t),e.prototype.build=function(){return c({tag:"h"+this.props.level,text:this.props.text})},e}(s)},"./src/index.ts":(t,e,n)=>{n.r(e),n("./src/style.css");var r,o=n("./src/Woon.ts"),i=(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),s=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.init=function(){this.setState("who","world")},e.prototype.build=function(){return(0,o.w)({tag:"h1",text:"Hello "+this.getState("who")+"!"})},e}(o.Component);new o.default(document.querySelector("#app"),new s)}},n={};function r(t){var o=n[t];if(void 0!==o)return o.exports;var i=n[t]={exports:{}};return e[t](i,i.exports,r),i.exports}r.m=e,t=[],r.O=(e,n,o,i)=>{if(!n){var s=1/0;for(p=0;p<t.length;p++){for(var[n,o,i]=t[p],u=!0,c=0;c<n.length;c++)(!1&i||s>=i)&&Object.keys(r.O).every((t=>r.O[t](n[c])))?n.splice(c--,1):(u=!1,i<s&&(s=i));if(u){t.splice(p--,1);var l=o();void 0!==l&&(e=l)}}return e}i=i||0;for(var p=t.length;p>0&&t[p-1][2]>i;p--)t[p]=t[p-1];t[p]=[n,o,i]},r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t={main:0,styles:0};r.O.j=e=>0===t[e];var e=(e,n)=>{var o,i,[s,u,c]=n,l=0;if(s.some((e=>0!==t[e]))){for(o in u)r.o(u,o)&&(r.m[o]=u[o]);if(c)var p=c(r)}for(e&&e(n);l<s.length;l++)i=s[l],r.o(t,i)&&t[i]&&t[i][0](),t[s[l]]=0;return r.O(p)},n=self.webpackChunktypescript_webpack=self.webpackChunktypescript_webpack||[];n.forEach(e.bind(null,0)),n.push=e.bind(null,n.push.bind(n))})();var o=r.O(void 0,["styles"],(()=>r("./src/index.ts")));o=r.O(o)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,