/*! For license information please see main.bundle.js.LICENSE.txt */
(()=>{"use strict";var t,e={"./src/style.css":(t,e,n)=>{n.r(e)},"./src/Woon.ts":(t,e,n)=>{n.r(e),n.d(e,{Component:()=>s,default:()=>c,w:()=>l,Heading:()=>a});var o,r=(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),i=function(){return(i=Object.assign||function(t){for(var e,n=1,o=arguments.length;n<o;n++)for(var r in e=arguments[n])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t}).apply(this,arguments)},s=function(){function t(t){this.props={},this.state={},this.onChange=function(){},this.props=t,this.state.props=t,this.init()}return t.prototype.init=function(){},t.prototype.setState=function(t,e){var n;return this.state=i(i({},this.state),((n={})[t]=e,n)),this.onChange(),this.state[t]},t.prototype.getState=function(t){return this.state[t]},t}();const c=function(){function t(t,e){var n=this;return this.entry=t,this.component=e,Object.defineProperty(e,"onChange",{value:function(){n.render()},writable:!1}),this.render()}return t.prototype.render=function(){for(;this.entry.firstChild;)this.entry.removeChild(this.entry.firstChild);return this.entry.appendChild(this.component.build()),this},t}();function l(t){var e=t.tag,n=t.attributes,o=t.styles,r=t.text,i=t.children,c=t.events,l=document.createElement(e);return null!=r&&l.appendChild(document.createTextNode(r)),null!=n&&Object.keys(n).forEach((function(t){l.setAttribute(t,n[t])})),null!=o&&Object.keys(o).forEach((function(t){l.style[t]=o[t]})),null!=i&&i.forEach((function(t){t instanceof HTMLElement?l.appendChild(t):t instanceof s&&l.appendChild(t.build())})),null!=c&&Object.keys(c).forEach((function(t){l.addEventListener(t,(function(e){return c[t](e,l)}))})),l}var a=function(t){function e(e){return t.call(this,e)||this}return r(e,t),e.prototype.build=function(){return l({tag:"h"+this.props.level,text:this.props.text})},e}(s)},"./src/components/Body.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>c});var o,r=n("./src/Woon.ts"),i=n("./src/components/InfoGrid.ts"),s=(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});const c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return s(e,t),e.prototype.build=function(){return(0,r.w)({tag:"div",styles:{width:"70%",maxWidth:"1200px",backgroundColor:"hsl(0, 0%, 90%)",margin:"0 auto",color:"white",display:"grid",gridTemplateRows:"4fr 3fr"},children:[(0,r.w)({tag:"div",styles:{width:"100%",backgroundColor:"hsl(211, 75%, 50%)",display:"flex",justifyContent:"center",alignItems:"center",flexDirection:"column"},children:[(0,r.w)({tag:"h1",text:"Hello, world!",styles:{fontSize:"8rem"}}),(0,r.w)({tag:"span",text:"This site was made using Woon.js",styles:{fontSize:"1.5rem"}})]}),new i.default]})},e}(r.Component)},"./src/components/InfoGrid.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>s});var o,r=n("./src/Woon.ts"),i=(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});const s=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.build=function(){return(0,r.w)({tag:"div",styles:{display:"grid",gridTemplateColumns:"repeat(2, 1fr)"},children:[(0,r.w)({tag:"a",styles:{backgroundColor:"hsl(211, 80%, 58%)",justifyContent:"center",alignItems:"center",display:"flex",color:"#fff",textDecoration:"none"},attributes:{href:"https://github.com/euseanwoon2016/woon-js"},children:[(0,r.w)({tag:"div",text:"View on GitHub",styles:{fontSize:"2rem",fontWeight:"bold"}})]}),(0,r.w)({tag:"a",styles:{backgroundColor:"hsl(211, 80%, 47%)",justifyContent:"center",alignItems:"center",display:"flex",color:"#fff",textDecoration:"none"},attributes:{href:"https://github.com/euseanwoon2016/woon-js/tree/main/examples"},children:[(0,r.w)({tag:"div",text:"View Examples",styles:{fontSize:"2rem",fontWeight:"bold"}})]})]})},e}(r.Component)},"./src/components/NavBar.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>s});var o,r=n("./src/Woon.ts"),i=(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});const s=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.build=function(){return(0,r.w)({tag:"nav",styles:{width:"100%",backgroundColor:"hsl(211, 100%, 56%)",color:"hsl(0, 0%, 96%)"},children:[(0,r.w)({tag:"nav",styles:{width:"70%",maxWidth:"1200px",padding:"2rem",margin:"0 auto",display:"flex",justifyContent:"space-between",alignItems:"center"},children:[(0,r.w)({tag:"h1",styles:{textDecoration:"none",fontSize:"1.5em",fontWeight:"bold",textAlign:"center",padding:"0px",margin:"0px",border:"0px"},text:this.props.title})]})]})},e}(r.Component)},"./src/index.ts":(t,e,n)=>{n.r(e),n("./src/style.css");var o,r=n("./src/components/Body.ts"),i=n("./src/components/NavBar.ts"),s=n("./src/Woon.ts"),c=(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),l=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return c(e,t),e.prototype.init=function(){},e.prototype.build=function(){return(0,s.w)({tag:"div",styles:{backgroundColor:"hsl(0, 0%, 96%)",width:"100%",height:"100%",display:"grid",gridTemplateRows:"auto 1fr"},children:[new i.default({title:"Woon.js Framework"}),new r.default]})},e}(s.Component);new s.default(document.querySelector("#app"),new l)}},n={};function o(t){var r=n[t];if(void 0!==r)return r.exports;var i=n[t]={exports:{}};return e[t](i,i.exports,o),i.exports}o.m=e,t=[],o.O=(e,n,r,i)=>{if(!n){var s=1/0;for(u=0;u<t.length;u++){for(var[n,r,i]=t[u],c=!0,l=0;l<n.length;l++)(!1&i||s>=i)&&Object.keys(o.O).every((t=>o.O[t](n[l])))?n.splice(l--,1):(c=!1,i<s&&(s=i));if(c){t.splice(u--,1);var a=r();void 0!==a&&(e=a)}}return e}i=i||0;for(var u=t.length;u>0&&t[u-1][2]>i;u--)t[u]=t[u-1];t[u]=[n,r,i]},o.d=(t,e)=>{for(var n in e)o.o(e,n)&&!o.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},o.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),o.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t={main:0,styles:0};o.O.j=e=>0===t[e];var e=(e,n)=>{var r,i,[s,c,l]=n,a=0;if(s.some((e=>0!==t[e]))){for(r in c)o.o(c,r)&&(o.m[r]=c[r]);if(l)var u=l(o)}for(e&&e(n);a<s.length;a++)i=s[a],o.o(t,i)&&t[i]&&t[i][0](),t[s[a]]=0;return o.O(u)},n=self.webpackChunktypescript_webpack=self.webpackChunktypescript_webpack||[];n.forEach(e.bind(null,0)),n.push=e.bind(null,n.push.bind(n))})();var r=o.O(void 0,["styles"],(()=>o("./src/index.ts")));r=o.O(r)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,